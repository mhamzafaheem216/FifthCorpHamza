package com.fifthcorp.Hamza.controllers;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fifthcorp.Hamza.commons.APIEndpoints;
import com.fifthcorp.Hamza.commons.Response;
import com.fifthcorp.Hamza.entities.Contact;
import com.fifthcorp.Hamza.sevices.ContactService;

import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping(APIEndpoints.CONTACT_ENDPOINT)
@RequiredArgsConstructor
public class ContactController {

    private final ContactService contactService;

    // Get all contacts
    @GetMapping("/fetchAll")
    public ResponseEntity<Object> getAll() {
        List<Contact> contacts = contactService.getAllContacts();
        if (contacts.isEmpty()) {
            return new ResponseEntity<>(new Response("No contacts found"), HttpStatus.OK);
        }
        return new ResponseEntity<>(contacts, HttpStatus.OK);
    }

    // Get contacts by type
    @GetMapping("/type/{type}")
    public ResponseEntity<Object> getByType(@PathVariable String type) {
        List<Contact> contacts = contactService.getContactsByType(type);
        if (contacts.isEmpty()) {
            return new ResponseEntity<>(new Response("No contacts found for type: " + type), HttpStatus.OK);
        }
        return new ResponseEntity<>(contacts, HttpStatus.OK);
    }

    // Create a new contact
    @PostMapping
    public ResponseEntity<Contact> create(@RequestBody Contact contact) {
        Contact createdContact = contactService.createContact(contact);
        return new ResponseEntity<>(createdContact, HttpStatus.CREATED);
    }

    // Update an existing contact
    @PutMapping("/{id}")
    public ResponseEntity<Object> update(@PathVariable Long id, @RequestBody Contact contact) {
        try {
            Contact updatedContact = contactService.updateContact(id, contact);
            return new ResponseEntity<>(updatedContact, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(new Response(e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
