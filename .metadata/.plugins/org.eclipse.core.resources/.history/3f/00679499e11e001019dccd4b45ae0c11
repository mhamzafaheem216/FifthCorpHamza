package com.fifthcorp.Hamza.controllers;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.fifthcorp.Hamza.commons.APIEndpoints;
import com.fifthcorp.Hamza.commons.Helper;
import com.fifthcorp.Hamza.commons.Response;
import com.fifthcorp.Hamza.entities.Unit;
import com.fifthcorp.Hamza.sevices.UnitService;

import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping(APIEndpoints.UNIT_ENDPOINT)
@RequiredArgsConstructor
public class UnitController {

    private final UnitService unitService;


    @GetMapping("fetchAll")
    public ResponseEntity<Object> getAll(HttpServletRequest request) {
        if (!Helper.validateToken(request)) {
            return new ResponseEntity<>(new Response("Unauthorized: Invalid token"), HttpStatus.UNAUTHORIZED);
        }

        List<Unit> units = unitService.getAllUnits();
        if (units.isEmpty()) {
            return new ResponseEntity<>(new Response("No units found"), HttpStatus.OK);
        }
        return new ResponseEntity<>(units, HttpStatus.OK);
    }


    @GetMapping("/owner/{ownerId}")
    public ResponseEntity<Object> getByOwner(@PathVariable Long ownerId, HttpServletRequest request) {
        if (!Helper.validateToken(request)) {
            return new ResponseEntity<>(new Response("Unauthorized: Invalid token"), HttpStatus.UNAUTHORIZED);
        }

        List<Unit> units = unitService.getUnitsByOwner(ownerId);
        if (units.isEmpty()) {
            return new ResponseEntity<>(new Response("No units found for owner: " + ownerId), HttpStatus.OK);
        }
        return new ResponseEntity<>(units, HttpStatus.OK);
    }

    
    @PostMapping("/add")
    public ResponseEntity<Response> create(@RequestBody Unit unit, HttpServletRequest request) {
        if (!Helper.validateToken(request)) {
            return new ResponseEntity<>(new Response("Unauthorized: Invalid token"), HttpStatus.UNAUTHORIZED);
        }

        try {
            Unit createdUnit = unitService.createUnit(unit);
            return new ResponseEntity<>(new Response("Unit created successfully", createdUnit), HttpStatus.CREATED);
        } catch (Exception e) {
            return new ResponseEntity<>(new Response("Error: " + e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Update an existing unit
    @PutMapping("/update/{id}")
    public ResponseEntity<Object> update(@PathVariable Long id, @RequestBody Unit unit, HttpServletRequest request) {
        if (!Helper.validateToken(request)) {
            return new ResponseEntity<>(new Response("Unauthorized: Invalid token"), HttpStatus.UNAUTHORIZED);
        }

        try {
            Unit updatedUnit = unitService.updateUnit(id, unit);
            return new ResponseEntity<>(updatedUnit, HttpStatus.OK);
        } catch (Exception e) {
            return new ResponseEntity<>(new Response(e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}
